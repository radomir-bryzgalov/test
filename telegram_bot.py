import openai
from dotenv import load_dotenv
import os
from datetime import datetime
import pytz
import uuid
import json
import logging

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
    ConversationHandler,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API-–∫–ª—é—á OpenAI
openai.api_key = os.getenv('OPENAI_API_KEY')

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è ConversationHandler
ASK_CITY = 1
POST_TIMEZONE_SET = 2
CHANGE_TIMEZONE = 3

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á: {user_id: {task_id: {'description': str, 'time': datetime, 'job': Job}}}
user_tasks = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å GPT —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
def get_timezone_via_gpt(city, current_time):
    try:
        system_message = {
            "role": "system",
            "content": (
                "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞. "
                "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–ø–µ—á–∞—Ç–∫–∏ –∏–ª–∏ –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏. "
                f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time.strftime('%Y-%m-%d %H:%M:%S')} (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM:SS). "
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞: {city}. "
                "–û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏ –≤–µ—Ä–Ω–∏ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä 'Europe/Moscow'. "
                "–ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–µ—Ä–Ω–∏ 'Unknown'."
            )
        }
        user_message = {
            "role": "user",
            "content": city
        }
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[system_message, user_message],
            max_tokens=50,
            temperature=0.0
        )
        content = response['choices'][0]['message']['content'].strip()
        logger.info(f"GPT –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}': '{content}'")

        # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        timezone = content.strip('"').strip("'").strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤–∞–ª–∏–¥–µ–Ω
        if timezone in pytz.all_timezones:
            return timezone
        else:
            logger.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: '{timezone}'")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ —á–µ—Ä–µ–∑ GPT: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å GPT —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏
def extract_task_and_time(prompt, current_time):
    try:
        system_message = {
            "role": "system",
            "content": (
                "–¢—ã Telegram-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –†–∞–¥–æ–º–∏—Ä–æ–º –ë—Ä—ã–∑–≥–∞–ª–æ–≤—ã–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∏–∑–≤–ª–µ—á—å –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. "
                f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {current_time.strftime('%Y-%m-%d %H:%M:%S')} (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM:SS). "
                "–ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—á–µ—Ä–µ–∑ 5 –º–∏–Ω'), —Ä–∞—Å—Å—á–∏—Ç–∞–π –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –≤—Ä–µ–º—è. "
                "–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: {\"task\": \"–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\", \"time\": \"–≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM:SS\"}."
            )
        }
        user_message = {
            "role": "user",
            "content": prompt
        }
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[system_message, user_message],
            max_tokens=150,
            temperature=0.3
        )
        content = response['choices'][0]['message']['content'].strip()
        logger.info(f"GPT –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –∑–∞–¥–∞—á–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏: '{content}'")
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
        result = json.loads(content)
        return result.get('task'), result.get('time')
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: {e}")
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: '{content}'")
        return None, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return None, None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
async def send_instructions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    instructions = (
        "üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>\n\n"
        "1. <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:</b> –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±—É—é –∑–∞–¥–∞—á—É –≤–º–µ—Å—Ç–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å. –ü—Ä–∏–º–µ—Ä: '–í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π –∑–∞–≤—Ç—Ä–∞ –≤ 15:00' –∏–ª–∏ '–ü—Ä–æ–±–µ–∂–∫–∞ —á–µ—Ä–µ–∑ —á–∞—Å'.\n"
        "2. <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á:</b> –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ —Å–≤–æ–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.\n"
        "3. <b>–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:</b> –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.\n"
        "4. <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b> –í —Ä–∞–∑–¥–µ–ª–µ '‚ûï –ï—â—ë' –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–ª–∏ —Å–Ω–æ–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n\n"
    )
    await query.message.reply_text(
        instructions,
        parse_mode=ParseMode.HTML,
        reply_markup=main_menu()
    )

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = context.user_data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —É–∂–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    if 'timezone' in user_data:
        welcome_message = (
            "–ü—Ä–∏–≤–µ—Ç! –Ø Telegram-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –†–∞–¥–æ–º–∏—Ä–æ–º –ë—Ä—ã–∑–≥–∞–ª–æ–≤—ã–º. "
            "–í—ã —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ."
        )
        await update.message.reply_text(welcome_message, reply_markup=main_menu())
        return ConversationHandler.END

    # –ï—Å–ª–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø Telegram-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –†–∞–¥–æ–º–∏—Ä–æ–º –ë—Ä—ã–∑–≥–∞–ª–æ–≤—ã–º. "
        "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥."
    )
    await update.message.reply_text(welcome_message)
    await update.message.reply_text("üåç –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    return ASK_CITY

# –ú–µ–Ω—é –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
def post_timezone_menu():
    keyboard = [
        [InlineKeyboardButton("üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data='instructions')],
        [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Å—Ä–∞–∑—É", callback_data='start_now')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ú–µ–Ω—é –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
def main_menu():
    keyboard = [
        [InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏", callback_data='view_tasks')],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data='delete_task')],
        [InlineKeyboardButton("‚ûï –ï—â—ë", callback_data='more')],
    ]
    return InlineKeyboardMarkup(keyboard)

# –ú–µ–Ω—é "–µ—â—ë"
def more_menu():
    keyboard = [
        [InlineKeyboardButton("üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data='instructions')],
        [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data='change_timezone')],
    ]
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –≥–æ—Ä–æ–¥–µ
async def receive_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    city = update.message.text.strip()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∫–∞–∑–∞–ª –≥–æ—Ä–æ–¥: {city}")

    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC –¥–ª—è GPT
    now = datetime.now(pytz.utc)
    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —á–µ—Ä–µ–∑ GPT
    timezone_str = get_timezone_via_gpt(city, now)

    if not timezone_str:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='retry_city')]
            ])
        )
        return ASK_CITY

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ user_data
    previous_timezone = context.user_data.get('timezone')
    context.user_data['timezone'] = timezone_str
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ: {timezone_str}")

    # –ï—Å–ª–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–¥–∞—á
    if previous_timezone and previous_timezone != timezone_str:
        new_timezone = pytz.timezone(timezone_str)
        old_timezone = pytz.timezone(previous_timezone)
        tasks = user_tasks.get(user_id, {})
        for task in tasks.values():
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –≤ –Ω–æ–≤—ã–π
            task_time_utc = task['time'].astimezone(pytz.utc)
            task['time'] = task_time_utc.astimezone(new_timezone)
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
            current_jobs = context.job_queue.get_jobs_by_name(task['id'])
            for job in current_jobs:
                job.schedule_removal()
            context.job_queue.run_once(
                send_reminder,
                when=(task['time'] - datetime.now(new_timezone)).total_seconds(),
                data={'user_id': user_id, 'task_id': task['id']},
                name=task['id']
            )
        logger.info(f"–í—Ä–µ–º—è –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É.")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏–ª–∏ –Ω–∞—á–∞—Ç—å —Å—Ä–∞–∑—É
    confirmation_message = (
        f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {timezone_str}.\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?"
    )
    await update.message.reply_text(
        confirmation_message,
        reply_markup=post_timezone_menu()
    )

    return POST_TIMEZONE_SET

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"
async def retry_city_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –µ—â—ë —Ä–∞–∑.")
    return ASK_CITY

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å —Å—Ä–∞–∑—É"
async def start_now_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(
        "–í—ã –≥–æ—Ç–æ–≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞! –î–æ–±–∞–≤–ª—è–π—Ç–µ –∑–∞–¥–∞—á–∏, –∏ —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –Ω–∏—Ö.",
        parse_mode=ParseMode.HTML,
        reply_markup=main_menu()
    )
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == 'view_tasks':
        tasks = user_tasks.get(user_id, {})
        if not tasks:
            await query.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.", reply_markup=main_menu())
            return

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –∫ —Å–∞–º—ã–º –¥–∞–ª—å–Ω–∏–º)
        sorted_tasks = sorted(tasks.values(), key=lambda x: x['time'])

        message = "üìù <b>–í–∞—à–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>\n\n"
        for idx, task in enumerate(sorted_tasks, start=1):
            message += (
                f"{idx}. <b>{task['description']}</b> - <i>{task['time'].strftime('%Y-%m-%d %H:%M:%S')}</i>\n"
            )
        await query.message.reply_text(message, parse_mode=ParseMode.HTML, reply_markup=main_menu())

    elif query.data == 'delete_task':
        tasks = user_tasks.get(user_id, {})
        if not tasks:
            await query.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=main_menu())
            return

        keyboard = []
        for task in tasks.values():
            button_text = f"üóë {task['description']}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f'delete_{task["id"]}')])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

    elif query.data == 'more':
        await query.message.reply_text("‚öôÔ∏è <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:</b>", parse_mode=ParseMode.HTML, reply_markup=more_menu())

    elif query.data == 'instructions':
        instructions = (
            "üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>\n\n"
            "1. <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:</b> –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±—É—é –∑–∞–¥–∞—á—É –≤–º–µ—Å—Ç–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å. –ü—Ä–∏–º–µ—Ä: '–í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π –∑–∞–≤—Ç—Ä–∞ –≤ 15:00' –∏–ª–∏ '–ü—Ä–æ–±–µ–∂–∫–∞ —á–µ—Ä–µ–∑ —á–∞—Å'.\n"
            "2. <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á:</b> –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ —Å–≤–æ–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.\n"
            "3. <b>–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:</b> –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.\n"
            "4. <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b> –í —Ä–∞–∑–¥–µ–ª–µ '‚ûï –ï—â—ë' –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–ª–∏ —Å–Ω–æ–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n\n"
        )
        await query.message.reply_text(
            instructions,
            parse_mode=ParseMode.HTML,
            reply_markup=main_menu()
        )

    elif query.data == 'start_now':
        await query.message.reply_text(
            "–í—ã –≥–æ—Ç–æ–≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞! –î–æ–±–∞–≤–ª—è–π—Ç–µ –∑–∞–¥–∞—á–∏, –∏ —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –Ω–∏—Ö.",
            parse_mode=ParseMode.HTML,
            reply_markup=main_menu()
        )

    elif query.data == 'change_timezone':
        await query.message.reply_text("üåç –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
        return CHANGE_TIMEZONE

    elif query.data.startswith('delete_'):
        task_id = query.data.split('_')[1]
        tasks = user_tasks.get(user_id, {})
        task = tasks.get(task_id)

        if task:
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            context.user_data['delete_task_id'] = task_id

            confirmation_keyboard = [
                [InlineKeyboardButton("‚úÖ –£–¥–∞–ª–∏—Ç—å", callback_data='confirm_delete')],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_delete')]
            ]
            reply_markup = InlineKeyboardMarkup(confirmation_keyboard)

            await query.message.reply_text(
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É '{task['description']}'?",
                reply_markup=reply_markup
            )

            return  # –û—Å—Ç–∞–≤–ª—è–µ–º ConversationHandler –∞–∫—Ç–∏–≤–Ω—ã–º
        else:
            await query.message.reply_text(
                "‚ö† –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.",
                reply_markup=main_menu()
            )

    elif query.data == 'confirm_delete':
        task_id = context.user_data.get('delete_task_id')
        if not task_id:
            await query.message.reply_text(
                "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=main_menu()
            )
            return

        tasks = user_tasks.get(user_id, {})
        task = tasks.get(task_id)

        if task:
            # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            del tasks[task_id]

            # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            current_jobs = context.job_queue.get_jobs_by_name(task_id)
            for job in current_jobs:
                job.schedule_removal()

            await query.message.reply_text(
                f"‚úÖ –ó–∞–¥–∞—á–∞ '{task['description']}' —É–¥–∞–ª–µ–Ω–∞.",
                reply_markup=main_menu()
            )
            logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await query.message.reply_text(
                "‚ö† –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.",
                reply_markup=main_menu()
            )

        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ ID –∑–∞–¥–∞—á–∏
        context.user_data.pop('delete_task_id', None)

    elif query.data == 'cancel_delete':
        await query.message.reply_text(
            "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=main_menu()
        )
        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ ID –∑–∞–¥–∞—á–∏
        context.user_data.pop('delete_task_id', None)

    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–¥–∞—á–∏)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    message = update.message.text

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    user_data = context.user_data
    if 'timezone' not in user_data:
        await update.message.reply_text(
            "‚ùå –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start.",
            reply_markup=main_menu()
        )
        return

    timezone_str = user_data['timezone']
    user_timezone = pytz.timezone(timezone_str)

    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    now = datetime.now(user_timezone)
    logger.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {now.strftime('%Y-%m-%d %H:%M:%S')}")

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ–º–æ—â—å—é GPT
    task_description, task_time_str = extract_task_and_time(message, now)

    if not task_description or not task_time_str:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–¥–∞—á—É –∏–ª–∏ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=main_menu()
        )
        return

    # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏
    try:
        task_time = datetime.strptime(task_time_str, '%Y-%m-%d %H:%M:%S')
        task_time = user_timezone.localize(task_time)
        logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏: {task_time.strftime('%Y-%m-%d %H:%M:%S')}")
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM:SS.",
            reply_markup=main_menu()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
    if task_time <= now:
        await update.message.reply_text(
            "‚ö† –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=main_menu()
        )
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∑–∞–¥–∞—á–∏
    task_id = str(uuid.uuid4())[:8]

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    task = {
        'id': task_id,
        'description': task_description,
        'time': task_time
    }

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    if user_id not in user_tasks:
        user_tasks[user_id] = {}
    user_tasks[user_id][task_id] = task

    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    context.job_queue.run_once(
        send_reminder,
        when=(task_time - now).total_seconds(),
        data={'user_id': user_id, 'task_id': task_id},
        name=task_id
    )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    confirmation_message = (
        f"‚úÖ <b>–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
        f"üìù <b>–ó–∞–¥–∞—á–∞:</b> {task_description}\n"
        f"üïí <b>–í—Ä–µ–º—è:</b> {task_time.strftime('%Y-%m-%d %H:%M:%S')}"
    )
    await update.message.reply_text(
        confirmation_message,
        parse_mode=ParseMode.HTML,
        reply_markup=main_menu()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    user_id = job.data['user_id']
    task_id = job.data['task_id']

    task = user_tasks.get(user_id, {}).get(task_id)

    if task:
        reminder_message = (
            f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b>\n\n"
            f"üìù <b>–ó–∞–¥–∞—á–∞:</b> {task['description']}\n"
            f"üïí <b>–í—Ä–µ–º—è:</b> {task['time'].strftime('%Y-%m-%d %H:%M:%S')}"
        )
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=reminder_message,
                parse_mode=ParseMode.HTML
            )
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
        del user_tasks[user_id][task_id]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=main_menu()
        )
    elif update.callback_query:
        await update.callback_query.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=main_menu()
        )
    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
async def start_change_timezone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("üåç –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    return CHANGE_TIMEZONE

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞
if __name__ == '__main__':
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    if not TOKEN:
        logger.error("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.")
        exit(1)

    application = ApplicationBuilder().token(TOKEN).build()

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ConversationHandler –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    conv_handler_setup_timezone = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            ASK_CITY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_city),
                CallbackQueryHandler(retry_city_handler, pattern='^retry_city$')
            ],
            POST_TIMEZONE_SET: [
                CallbackQueryHandler(send_instructions, pattern='^instructions$'),
                CallbackQueryHandler(start_now_handler, pattern='^start_now$')
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ConversationHandler –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    conv_handler_change_timezone = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_change_timezone, pattern='^change_timezone$')],
        states={
            CHANGE_TIMEZONE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_city),
                CallbackQueryHandler(retry_city_handler, pattern='^retry_city$')
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(conv_handler_setup_timezone)
    application.add_handler(conv_handler_change_timezone)
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CommandHandler('cancel', cancel))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()
